// Generated by CoffeeScript 1.11.1
(function() {
  var ProcessEnvPrecompiler, fs;

  fs = require("fs");

  module.exports = ProcessEnvPrecompiler = (function() {
    ProcessEnvPrecompiler.prototype.brunchPlugin = true;

    ProcessEnvPrecompiler.prototype.searchRegEx = /\$PROCESS_ENV_(\w+)/gi;

    function ProcessEnvPrecompiler(config) {
      var conf, ref;
      conf = ((ref = config.plugins) != null ? ref.process_env : void 0) || {};
      this.customSources = conf.custom_sources || [];
      this.raw = conf.raw || false;
    }

    ProcessEnvPrecompiler.prototype.includeCustomSources = function(generatedFiles) {
      var file, files, generatedFile, i, j, len, len1, ref;
      if (!(this.customSources.length > 0)) {
        return generatedFiles;
      }
      files = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = generatedFiles.length; i < len; i++) {
          file = generatedFiles[i];
          results.push({
            path: file.path
          });
        }
        return results;
      })();
      for (i = 0, len = generatedFiles.length; i < len; i++) {
        generatedFile = generatedFiles[i];
        ref = generatedFile.sourceFiles;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          file = ref[j];
          if (file.path.indexOf(this.customSources) > -1) {
            files.push(file);
          }
        }
      }
      return files;
    };

    ProcessEnvPrecompiler.prototype.onCompile = function(generatedFiles) {
      var file, i, len, ref, results;
      ref = this.includeCustomSources(generatedFiles);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        file = ref[i];
        results.push((function(_this) {
          return function(file) {
            var data, result;
            data = fs.readFileSync(file.path, "utf8");
            result = data.replace(_this.searchRegEx, function(match) {
              var replacement;
              match = match.replace('$PROCESS_ENV_', '');
              if (match && process.env[match]) {
                if (_this.raw) {
                  replacement = process.env[match];
                } else {
                  replacement = "'" + process.env[match] + "'";
                }
              } else {
                replacement = 'undefined';
              }
              return replacement;
            });
            return fs.writeFileSync(file.path, result);
          };
        })(this)(file));
      }
      return results;
    };

    return ProcessEnvPrecompiler;

  })();

}).call(this);
